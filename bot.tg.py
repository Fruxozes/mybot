from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler
import logging
from telegram.ext import filters

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

BOT_TOKEN = "7566090908:AAGTqHEgryIB8rvSciKuDexIgl0pV6hCrIE"

START_ANIMATION_URL = "https://media.tenor.com/eTrT0gLmtG0AAAAi/monkey-greeting-monkey.gif"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_animation(chat_id=update.effective_chat.id, animation=START_ANIMATION_URL,
                                         caption="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞!")
        logging.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥–∏—Ñ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.username} ({update.message.from_user.id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∏—Ñ–∫–∏: {e}")


USER_STICKERS = {
    7146058196: "CAACAgIAAxkBAAENK7hnx_7h6Sz8PWUog-h6kCIq9XfrjgACYSQAAjMYSEllM27K13R3HDYE",
    1788991408: "CAACAgIAAxkBAAENLzRnyE_t8eWh9gbPT4srtZv-Tlm8OgACYzQAAuaA-EtdfQABBw0vp2A2BA",
    1375000244: "CAACAgIAAxkBAAENK8VnyAABKMXs-xXfeoWXZuFe5RzzRKkAAr9IAAJM_TlIQFOzw_7HFsg2BA",
    1924072157: "CAACAgIAAxkBAAENLxlnyE3ai4xETmW36iaocLjsDHz56wACOjUAAnBegUiUGQHBPXcCcTYE",
    6615649601: "CAACAgIAAxkBAAENLzhnyFAphusldZD9aFaZYHyw4cd_TgACTGgAAkdBsEqdnfeDXo-aeDYE"
}


async def vopros(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response_text = "–∞ —Ç–µ–±–µ –∫–∞–∫–∞—è –Ω–∞—Ö—É–π —Ä–∞–∑–Ω–∏—Ü–∞?"
        await update.message.reply_text(response_text)
        logging.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /vopros –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.username} ({update.message.from_user.id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /vopros: {e}")


async def creator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response_text = "–ó–∞–µ–±–∞—Ç—ã–π —Ç–∏–ø, –∞ —á–µ?"
        await  update.message.reply_text(response_text)
        logging.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /creator –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.username} ({update.message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /creator: {e}")


async def ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        respose_text = "–¥–∞ —Ö—É–π, –æ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–∞–∫ —á—Ç–æ —á–∏–ª—å—Ç–µ"
        await update.message.reply_text(respose_text)
        logging.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /ai –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.username} ({update.message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /ai: {e}")


async def handle_specific_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"handle_specific_user_message –≤—ã–∑–≤–∞–Ω–∞!")

    try:
        user = update.message.from_user
        user_id = user.id
        logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user_id})")

        if user_id in USER_STICKERS:
            sticker_file_id = USER_STICKERS[user_id]
            logging.info(f"–ù–∞–π–¥–µ–Ω —Å—Ç–∏–∫–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {sticker_file_id}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logging.info(f"–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä...")
            await context.bot.send_sticker(chat_id=update.effective_chat.id, sticker=sticker_file_id)
            logging.info(f"–°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} ({user_id})")
        else:
            logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∏–∫–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò–∑–≤–∏–Ω–∏, –¥–ª—è —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–∏–∫–µ—Ä–∞!")


    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {e}")


async def skull_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("–æ–æ–æ –Ω–µ—Ç, —ç—Ç–æ –∂–µ —á–µ—Ä–µ–ø, –Ω–∞–º –≤—Å–µ–º –ø–∏–∑–¥–µ—Ü")
        logging.info(
            f"–û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–º–∞–π–ª–∏–∫ —á–µ—Ä–µ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.username} ({update.message.from_user.id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–º–∞–π–ª–∏–∫–∞ —á–µ—Ä–µ–ø–∞: {e}")


async def people_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("–õ—é–¥–∏! –í—ã —Ö—É–π –Ω–∞ –±–ª—é–¥–µ!")
        logging.info(
            f"–û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ª—é–¥–∏' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.username} ({update.message.from_user.id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è '–ª—é–¥–∏': {e}")


async def door_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("–î–≤–µ—Ä—å –º–Ω–µ –∑–∞–ø–∏–ª–∏!")
        logging.info(
            f"–û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ '–¥–≤–µ—Ä—å' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.username} ({update.message.from_user.id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è '–¥–≤–µ—Ä—å': {e}")


async def yes_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("–ü–∏–∑–¥–∞")
        logging.info(
            f"–û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ '–¥–∞' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.username} ({update.message.from_user.id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è '–¥–∞': {e}")


async def no_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("–ø–∏–¥–æ—Ä–∞ –æ–≤—Ç–µ—Ç")
        logging.info(
            f"–û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.username} ({update.message.from_user.id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è '–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç': {e}")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    app.add_handler(CommandHandler("vopros", vopros))

    app.add_handler(CommandHandler("creator", creator))

    app.add_handler(CommandHandler("ai", ai))

    skull_filter = filters.Regex(pattern=r"üíÄ|‚ò†Ô∏è")

    app.add_handler(MessageHandler(skull_filter, skull_reaction))

    people_filter = filters.Regex(pattern=r"(?i)^–ª—é–¥–∏$")

    app.add_handler(MessageHandler(people_filter, people_reaction))

    door_filter = filters.Regex(pattern=r"(?i)^–¥–≤–µ—Ä—å$")

    app.add_handler(MessageHandler(door_filter, door_reaction))

    yes_filter = filters.Regex(pattern=r"(?i)^–¥–∞$")

    app.add_handler(MessageHandler(yes_filter, yes_reaction))

    no_filter = filters.Regex(pattern=r"(?i)^–Ω–µ—Ç$")

    app.add_handler(MessageHandler(no_filter, no_reaction))

    user_filter = filters.User(user_id=list(USER_STICKERS.keys()))

    app.add_handler(MessageHandler(user_filter & filters.TEXT, handle_specific_user_message))

    app.run_polling()


if __name__ == '__main__':
    main()
